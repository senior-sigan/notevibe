import axios from 'axios';
import type { NoteResponse, NotesResponse } from '../types/note';

const API_BASE_URL = 'http://localhost:3001/api';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockNotes = [
  {
    id: 1,
    user_id: 1,
    title: "–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ ‚ú®",
    content: "–≠—Ç–æ –º–æ—è –ø–µ—Ä–≤–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞! –ù–∞–¥–µ—é—Å—å, –æ–Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–º —á–∏—Ç–∞—Ç–µ–ª—è–º. üå∏ –ó–¥–µ—Å—å —è –¥–µ–ª—é—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º –º–∏—Ä–µ –∞–Ω–∏–º–µ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
    is_public: true,
    created_at: "2024-01-15T10:30:00Z",
    updated_at: "2024-01-15T10:30:00Z"
  },
  {
    id: 2,
    user_id: 2,
    title: "–†–µ—Ü–µ–ø—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è üåü",
    content: "–£—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á–∞—à–µ—á–∫–∏ –≥–æ—Ä—è—á–µ–≥–æ —á–∞—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª—é–±–∏–º–æ–≥–æ –∞–Ω–∏–º–µ. –ó–∞—Ç–µ–º –Ω–µ–º–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞, –ø—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ, –∏ –≤–µ—á–µ—Ä–æ–º –≤—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–∑—å—è–º–∏!",
    is_public: true,
    created_at: "2024-01-14T15:45:00Z",
    updated_at: "2024-01-14T15:45:00Z"
  },
  {
    id: 3,
    user_id: 3,
    title: "–ú—ã—Å–ª–∏ –æ React –∏ TypeScript üíª",
    content: "–°–µ–≥–æ–¥–Ω—è –∏–∑—É—á–∞–ª –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ React 19 –∏ TypeScript. –ü–æ—Ç—Ä—è—Å–∞—é—â–µ, –∫–∞–∫ —ç—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è! –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Ö—É–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è.",
    is_public: true,
    created_at: "2024-01-13T09:20:00Z",
    updated_at: "2024-01-13T09:20:00Z"
  },
  {
    id: 4,
    user_id: 4,
    title: "–õ—é–±–∏–º—ã–µ –∞–Ω–∏–º–µ —Å–µ–∑–æ–Ω–∞ üéå",
    content: "–í —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å 'One Piece', 'Demon Slayer' –∏ 'Jujutsu Kaisen'. –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ–π —Å –∫–∞–∂–¥—ã–º –≥–æ–¥–æ–º!",
    is_public: true,
    created_at: "2024-01-12T18:15:00Z",
    updated_at: "2024-01-12T18:15:00Z"
  },
  {
    id: 5,
    user_id: 5,
    title: "–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É üåÜ",
    content: "–°–µ–≥–æ–¥–Ω—è –≥—É–ª—è–ª –ø–æ –≤–µ—á–µ—Ä–Ω–µ–º—É –≥–æ—Ä–æ–¥—É. –û–≥–Ω–∏, –∑–≤—É–∫–∏, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ - –≤—Å–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º.",
    is_public: true,
    created_at: "2024-01-11T20:30:00Z",
    updated_at: "2024-01-11T20:30:00Z"
  },
  {
    id: 6,
    user_id: 6,
    title: "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ üöÄ",
    content: "–ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º! –≠—Ç–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ - –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∞–Ω–∏–º–µ—à–Ω–æ–º —Å—Ç–∏–ª–µ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. –û—á–µ–Ω—å –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω!",
    is_public: true,
    created_at: "2024-01-10T14:00:00Z",
    updated_at: "2024-01-10T14:00:00Z"
  }
];

export const notesApi = {
  getPublicNotes: async (): Promise<NotesResponse> => {
    try {
      const response = await api.get('/notes/public');
      return response.data;
    } catch (error) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.log('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return { notes: mockNotes };
    }
  },

  getMyNotes: async (): Promise<NotesResponse> => {
    try {
      const response = await api.get('/notes/my');
      return response.data;
    } catch (error) {
      return { notes: mockNotes.filter(note => note.user_id === 1) };
    }
  },

  getNoteById: async (id: number): Promise<NoteResponse> => {
    try {
      const response = await api.get(`/notes/${id}`);
      return response.data;
    } catch (error) {
      const note = mockNotes.find(n => n.id === id);
      if (!note) throw new Error('Note not found');
      return { note };
    }
  },

  createNote: async (data: { title: string; content?: string; is_public?: boolean }) => {
    try {
      const response = await api.post('/notes', data);
      return response.data;
    } catch (error) {
      throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  },

  updateNote: async (id: number, data: { title?: string; content?: string; is_public?: boolean }) => {
    try {
      const response = await api.put(`/notes/${id}`, data);
      return response.data;
    } catch (error) {
      throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  },

  deleteNote: async (id: number) => {
    try {
      const response = await api.delete(`/notes/${id}`);
      return response.data;
    } catch (error) {
      throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  },
};
